// Code generated by go-bindata.
// sources:
// data/enogu_logo_AA.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataEnogu_logo_aaTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xd1\xad\xea\x30\x0c\xfd\x47\x62\x87\xa3\x0c\x90\x2c\xe4\x51\xf2\x71\x25\x06\xc8\x02\xfc\x75\x0d\xa3\x0c\xc3\x00\x5e\xe1\xc9\x76\xf2\x48\x6f\x52\xe0\x0a\x84\x25\xda\xba\x3e\x8e\x8f\x8f\xdd\xfb\xcf\xcf\x68\xc2\x45\x98\x7f\x3d\xfc\xd0\x84\x0b\x01\x29\x9e\x4f\x93\x43\x33\x11\xbe\x98\x2b\x83\x80\x8c\x3c\xe5\x42\x26\x7c\x35\x93\x30\x67\x20\xcb\xed\xea\xf7\x3d\xa3\x70\xfd\x6f\x19\x08\xe3\xbd\xdb\x67\x29\xe5\x76\x05\x9d\x4f\xc2\x2c\x75\x53\x63\x56\xcc\x0b\x5b\xeb\xfc\x42\x9f\x48\xdd\xee\x17\x8e\x40\xf8\x4b\xd9\xd6\x2b\xfd\xbf\x5d\x5b\x75\x56\x97\xa7\x7a\x12\x87\x18\xd0\x63\xdf\xcc\x23\x5c\x02\x1c\x3b\x29\x4f\x75\x9b\x9a\xb6\x8c\xb3\x44\x6f\xa6\x69\xc7\x7a\x05\xec\xaa\x0f\xef\x1e\x5e\x51\xc3\x53\x4c\x2f\xef\x39\x65\x8b\xca\x8e\x31\x5f\x02\x2e\xa5\x35\x8f\x81\x9d\x7e\x20\x7f\x56\x98\x59\x69\xf2\xda\xaf\x02\xf7\xae\x30\x85\x0b\xf2\x0a\x10\xc9\x32\x65\x24\x28\x98\x89\xf3\xe1\x24\xd0\xaf\xad\x60\x87\x43\x3e\xda\x41\x09\x09\x36\xe5\x19\x16\xff\xea\x80\x20\x97\x98\x17\xd4\x5f\x1e\x89\x12\x66\x1a\x21\x53\xde\x55\x01\x22\x4c\x35\x3b\x39\x3b\xc6\xfa\x28\xb6\xa8\x20\xcc\x5a\xf4\xb1\x62\x41\x11\xf3\x46\xdc\x65\x59\xcd\x5c\x9b\x6d\x83\xd3\xf2\x97\x13\x77\xdc\xa7\x6f\x99\xb2\x76\x3e\xe9\x6f\x2d\x2e\x8e\x78\xe8\x76\xa8\x03\x51\x25\x50\xb7\xc1\x7d\xbf\xb0\xed\xa9\xd1\x3b\xc1\x26\x28\x30\xeb\x2e\x43\xd2\xba\x6b\x84\xb3\xad\x1e\x85\xd0\xef\x08\x92\xaa\xac\xd8\x86\x34\x57\x67\x8b\x67\x44\x72\x67\xb1\xd6\xdb\xeb\xd4\x3e\x1d\x16\x86\xec\x4b\xd0\xff\x8d\x4f\xbb\x6c\x61\xbc\x1c\x2e\x7f\xae\xaf\x46\x93\x29\xa1\x33\xf2\x70\xaa\x4a\x6a\x80\xb6\xdf\xaf\x7b\x2f\x1b\x03\xe9\x5f\x00\x00\x00\xff\xff\xfa\x5b\x09\x3b\x91\x07\x00\x00")

func dataEnogu_logo_aaTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataEnogu_logo_aaTxt,
		"data/enogu_logo_AA.txt",
	)
}

func dataEnogu_logo_aaTxt() (*asset, error) {
	bytes, err := dataEnogu_logo_aaTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/enogu_logo_AA.txt", size: 1937, mode: os.FileMode(438), modTime: time.Unix(1556030958, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/enogu_logo_AA.txt": dataEnogu_logo_aaTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"enogu_logo_AA.txt": &bintree{dataEnogu_logo_aaTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


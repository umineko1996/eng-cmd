// Code generated by go-bindata.
// sources:
// data/anzu_AA.txt
// data/enogu_logo_AA.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataAnzu_aaTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdb\x6d\xc4\x20\x10\xfc\x8f\x94\x1e\x46\x14\x60\x1a\x72\x29\xfe\x38\x29\x05\xd0\x40\xfe\xae\x8d\x8d\x28\xc6\x05\x6c\x0b\x11\xe6\x69\x0c\x78\x49\x2c\xcd\xc7\xe9\xf6\x3c\xb3\x33\x0b\xbe\xdd\x5f\x2f\x09\x98\x2c\x93\xdd\xbf\x88\xed\xbb\x89\xe5\xf3\x43\x40\x62\x98\x8c\x4c\x8e\xc6\x84\x58\x84\x4c\x99\x72\xd8\x23\x93\x51\x98\xe2\x0b\x7d\x28\x26\xea\xd0\xfe\x95\xb3\x4c\xa1\x45\x8d\xe5\x7f\xb4\x7d\xf2\x67\x98\x1d\xd1\xba\x5e\xc8\x67\x07\x36\xd9\x3e\xf4\x83\xec\x1e\x95\x87\x67\x0d\xe0\xaa\x31\xb4\xe0\xaf\x9f\xc3\xac\xca\x39\xaa\xb1\x8b\x54\x75\x37\x70\xee\x2c\x24\x27\x37\x36\x4c\xee\x0c\x93\x2a\x48\x1a\x03\x17\x2d\x79\x28\xb1\x4c\xd6\xd0\x8d\x47\x8e\xae\x5b\x05\x1f\x99\x74\x24\x41\xa4\x9f\x54\xa7\xe2\x9f\x95\x5a\x89\x83\x1f\x84\x55\x58\x81\xae\x0c\x40\xc9\x94\xf8\xe7\xfb\x90\x69\xc5\xe2\x5e\xf9\xf6\x5d\x36\xe0\xde\x98\x75\x3b\xc2\xe4\xa2\xd0\x96\xaf\x4f\xc2\x1a\xbe\x3f\xd3\xda\xea\x83\xfb\xe1\xbd\xa7\x91\x0e\x13\xe1\xa4\x83\x2d\xff\x0d\x92\xdd\x10\x4f\x91\x4c\x05\x75\xcf\x09\xea\xe2\x26\xca\xd4\xce\xbb\x86\x5c\x41\x1f\x4e\xd6\x86\x13\x49\xf4\x48\x53\xec\x96\xc1\x64\xc2\x29\x1b\x31\x31\x51\x39\x85\x59\x68\xc1\x7a\x91\x32\x72\x6b\xca\x9d\x96\x5f\x68\x22\x8c\x8c\xbe\x39\x8e\x12\x69\x41\xfa\x0d\x00\x00\xff\xff\xe3\xa9\x05\x42\x57\x09\x00\x00")

func dataAnzu_aaTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataAnzu_aaTxt,
		"data/anzu_AA.txt",
	)
}

func dataAnzu_aaTxt() (*asset, error) {
	bytes, err := dataAnzu_aaTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/anzu_AA.txt", size: 2391, mode: os.FileMode(438), modTime: time.Unix(1556115440, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataEnogu_logo_aaTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\xd1\xad\xea\x30\x0c\xfd\x47\x62\x87\xa3\x0c\x90\x2c\xe4\x51\xf2\x71\x25\x06\xc8\x02\xfc\x75\x0d\xa3\x0c\xc3\x00\x5e\xe1\xc9\x76\xf2\x48\x6f\x52\xe0\x0a\x84\xa5\x96\xba\x3e\x8e\x8f\x8f\xdd\xfb\xcf\xcf\x68\xc2\x45\x98\x7f\x3d\xfc\xd0\x84\x0b\x01\x29\x9e\x4f\x93\x43\x33\x11\xbe\x98\x2b\x83\x80\x8c\x3c\xe5\x42\x26\x7c\x35\x93\x30\x67\x20\xcb\xed\xda\x73\x09\xd7\xff\x96\x81\x30\xfe\x77\xfb\x2c\x99\xdc\xae\xa0\xf3\x49\x98\xa5\x6e\x6a\xcc\x8a\x79\x61\x6b\x9a\xdf\xe8\x13\xa9\xdb\xfd\xc2\x11\x08\x7f\x29\xd8\xba\xa4\xd7\xdb\x75\xac\xcb\x53\x3d\x89\x43\x0c\xe8\xb1\x6f\xe6\x11\x2e\x01\x8e\x9d\x94\xa7\xba\x4d\xed\x5a\xc6\x59\xa2\x37\xd3\xb4\x63\xbd\x02\x76\xbd\x87\x77\x0f\xaf\xa8\xe1\x29\xa6\x97\xf7\x9c\xb2\x45\x65\xc7\x98\x2f\x01\x97\xd2\x9a\x07\xc0\x4e\x3f\x90\x3f\x2b\xcc\xac\x34\x79\xed\x97\x80\x7b\x57\x98\xc2\x05\x79\x05\x88\x64\x99\x32\x12\x14\xcc\xc4\xf9\x70\x12\xe8\xd7\x3e\xb0\xc3\x21\x1f\x6d\x9f\x84\x04\x9b\xef\x0c\x8b\x7f\x75\x40\x90\x4b\xcc\x0b\xea\x2f\x8f\x44\x09\x33\x8d\x90\x29\xef\xaa\x00\x11\xa6\x9a\x9d\x9c\x1d\x63\x7d\x14\x5b\x54\x10\x66\x2d\xfa\x58\xb1\xa0\x88\x79\x17\xee\xb2\xac\x66\xae\xcd\xb6\xc1\x69\xf9\xcb\x89\x3b\xee\xd3\xb7\x4c\x59\x3b\x9f\xf4\xb7\x16\x17\x47\x3c\x74\x3b\xd4\x81\xa8\x12\xa8\xdb\xe0\xbe\x5f\xd8\xf6\xd4\xe8\x9d\x60\x13\x14\x98\x75\x97\x21\x69\xdd\x35\xc2\xd9\x56\x8f\x42\xe8\x17\x04\x49\x55\x56\x6c\x43\x9a\xab\xb3\xc5\x33\x22\xb9\xb3\x58\xeb\xed\x75\x6a\x1f\x0d\x0b\x43\xf6\x25\xe8\x57\xe3\xd3\x6e\x5b\x18\x2f\x87\xcb\x9f\xeb\xab\xd1\x64\x4a\xe8\x8c\x3c\x9c\xaa\x92\x1a\xa0\xed\xf7\xfb\xde\xcb\xc6\x40\xfa\x17\x00\x00\xff\xff\xae\x20\x68\x0f\x8b\x07\x00\x00")

func dataEnogu_logo_aaTxtBytes() ([]byte, error) {
	return bindataRead(
		_dataEnogu_logo_aaTxt,
		"data/enogu_logo_AA.txt",
	)
}

func dataEnogu_logo_aaTxt() (*asset, error) {
	bytes, err := dataEnogu_logo_aaTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/enogu_logo_AA.txt", size: 1931, mode: os.FileMode(438), modTime: time.Unix(1556109091, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/anzu_AA.txt": dataAnzu_aaTxt,
	"data/enogu_logo_AA.txt": dataEnogu_logo_aaTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"anzu_AA.txt": &bintree{dataAnzu_aaTxt, map[string]*bintree{}},
		"enogu_logo_AA.txt": &bintree{dataEnogu_logo_aaTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

